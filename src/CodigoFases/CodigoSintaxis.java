
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package CodigoFases;

import java_cup.runtime.Symbol;
import Herramientas.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CodigoSintaxis extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CodigoSintaxis() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CodigoSintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CodigoSintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\002\006\000\002\002" +
    "\005\000\002\002\004\000\002\002\003\000\002\011\007" +
    "\000\002\011\006\000\002\012\005\000\002\025\007\000" +
    "\002\025\006\000\002\023\005\000\002\023\004\000\002" +
    "\030\004\000\002\030\003\000\002\034\004\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\003\000\002\021\005\000\002\015\004\000" +
    "\002\005\004\000\002\022\004\000\002\033\003\000\002" +
    "\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\052\000\004\004\006\001\002\000\004\002\ufffd\001" +
    "\002\000\004\002\054\001\002\000\004\051\050\001\002" +
    "\000\006\016\014\053\015\001\002\000\002\001\002\000" +
    "\004\002\ufffe\001\002\000\004\052\035\001\002\000\002" +
    "\001\002\000\004\052\uffe8\001\002\000\004\052\uffe9\001" +
    "\002\000\004\011\ufff4\001\002\000\004\011\020\001\002" +
    "\000\004\052\022\001\002\000\002\001\002\000\012\035" +
    "\026\036\024\037\025\040\027\001\002\000\002\001\002" +
    "\000\004\052\033\001\002\000\004\052\032\001\002\000" +
    "\004\052\031\001\002\000\004\052\030\001\002\000\002" +
    "\001\002\000\002\001\002\000\002\001\002\000\002\001" +
    "\002\000\004\011\ufff5\001\002\000\004\046\036\001\002" +
    "\000\010\016\014\047\041\053\015\001\002\000\004\047" +
    "\044\001\002\000\004\052\042\001\002\000\002\001\002" +
    "\000\010\016\014\047\ufff6\053\015\001\002\000\004\047" +
    "\ufff7\001\002\000\002\001\002\000\002\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\000\001\002\000\004\052" +
    "\051\001\002\000\004\051\052\001\002\000\010\004\006" +
    "\016\ufffb\053\ufffb\001\002\000\006\016\ufffc\053\ufffc\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\052\000\010\002\004\011\006\024\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\007\024\010\025\012\033\011\001\001\000\006\013" +
    "\044\024\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\015\030\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\033\001\001\000\004\034\020" +
    "\001\001\000\004\035\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\036\033" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\042\033\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\052\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CodigoSintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CodigoSintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CodigoSintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    @Override
    public void syntax_error(Symbol sy) {
        Token t=(Token)sy.value;
        done_parsing();
        report_error("Error sint√°ctico" + sy.left,null);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CodigoSintaxis$actions {
  private final CodigoSintaxis parser;

  /** Constructor */
  CUP$CodigoSintaxis$actions(CodigoSintaxis parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CodigoSintaxis$do_action_part00000000(
    int                        CUP$CodigoSintaxis$act_num,
    java_cup.runtime.lr_parser CUP$CodigoSintaxis$parser,
    java.util.Stack            CUP$CodigoSintaxis$stack,
    int                        CUP$CodigoSintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CodigoSintaxis$result;

      /* select the action based on the action number */
      switch (CUP$CodigoSintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= GLOBAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-1)).right;
		Symbol start_val = (Symbol)((java_cup.runtime.Symbol) CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-1)).value;
		RESULT = start_val;
              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CodigoSintaxis$parser.done_parsing();
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // GLOBAL ::= pr_LIBRERIAS pr_FUNCIONES pr_CLASES pr_CODIGO 
            {
              Symbol RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("GLOBAL",0, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // GLOBAL ::= pr_LIBRERIAS pr_FUNCIONES pr_CODIGO 
            {
              Symbol RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("GLOBAL",0, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GLOBAL ::= pr_LIBRERIAS pr_CODIGO 
            {
              Symbol RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("GLOBAL",0, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GLOBAL ::= pr_CODIGO 
            {
              Symbol RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("GLOBAL",0, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // pr_LIBRERIAS ::= INCLUIR COMILLA ID COMILLA pr_LIBRERIAS 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("pr_LIBRERIAS",7, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // pr_LIBRERIAS ::= INCLUIR COMILLA ID COMILLA 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("pr_LIBRERIAS",7, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // pr_FUNCIONES ::= pr_INICIOF pr_CUERPOF pr_FINF 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("pr_FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // pr_INICIOF ::= TIPODATO ID PARAB expr_VARIABLES PARCE 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("pr_INICIOF",19, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // pr_INICIOF ::= TIPODATO ID PARAB PARCE 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("pr_INICIOF",19, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr_VARIABLES ::= TIPODATO ID expr_VARIABLES 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("expr_VARIABLES",17, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr_VARIABLES ::= TIPODATO ID 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("expr_VARIABLES",17, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // pr_CUERPOF ::= pr_LINEAS pr_CUERPO 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("pr_CUERPOF",22, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // pr_CUERPOF ::= pr_LINEAS 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("pr_CUERPOF",22, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // pr_FINF ::= RETORNAR expr_RETORNAR 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("pr_FINF",26, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr_RETORNAR ::= ID SUMA ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-2)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$CodigoSintaxis$stack.peek()).value;
		
                                        Token operacion = new Token("menos", "+");
                                        operacion.agregarHijos(i);
                                        operacion.agregarHijos(d);
                                        RESULT = operacion;
                                  
              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("expr_RETORNAR",27, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr_RETORNAR ::= ID RESTA ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-2)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$CodigoSintaxis$stack.peek()).value;
		
                                        Token operacion = new Token("menos", "-");
                                        operacion.agregarHijos(i);
                                        operacion.agregarHijos(d);
                                        RESULT = operacion;
                                  
              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("expr_RETORNAR",27, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr_RETORNAR ::= ID MUL ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-2)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$CodigoSintaxis$stack.peek()).value;
		
                                        Token operacion = new Token("menos", "*");
                                        operacion.agregarHijos(i);
                                        operacion.agregarHijos(d);
                                        RESULT = operacion;
                                  
              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("expr_RETORNAR",27, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr_RETORNAR ::= ID DIV ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-2)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$CodigoSintaxis$stack.peek()).value;
		
                                        Token operacion = new Token("menos", "/");
                                        operacion.agregarHijos(i);
                                        operacion.agregarHijos(d);
                                        RESULT = operacion;
                                  
              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("expr_RETORNAR",27, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr_RETORNAR ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$CodigoSintaxis$stack.peek()).value;
		
                                        Token operacion = new Token("menos", "identificador");
                                        operacion.agregarHijos(i);
                                        RESULT = operacion;
                                  
              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("expr_RETORNAR",27, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr_CLASES ::= pr_INICIOC pr_CUERPOC pr_FINC 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("expr_CLASES",15, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // pr_INICIOC ::= CLASE ID 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("pr_INICIOC",11, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // pr_CUERPOC ::= expr_PROPIEDADES expr_METODOS 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("pr_CUERPOC",3, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr_PROPIEDADES ::= pr_PROPIEDADES expr_PROPIEDADES 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("expr_PROPIEDADES",16, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.elementAt(CUP$CodigoSintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPODATO ::= ENTERO 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("TIPODATO",25, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPODATO ::= CADENA 
            {
              Object RESULT =null;

              CUP$CodigoSintaxis$result = parser.getSymbolFactory().newSymbol("TIPODATO",25, ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$CodigoSintaxis$stack.peek()), RESULT);
            }
          return CUP$CodigoSintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CodigoSintaxis$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CodigoSintaxis$do_action(
    int                        CUP$CodigoSintaxis$act_num,
    java_cup.runtime.lr_parser CUP$CodigoSintaxis$parser,
    java.util.Stack            CUP$CodigoSintaxis$stack,
    int                        CUP$CodigoSintaxis$top)
    throws java.lang.Exception
    {
              return CUP$CodigoSintaxis$do_action_part00000000(
                               CUP$CodigoSintaxis$act_num,
                               CUP$CodigoSintaxis$parser,
                               CUP$CodigoSintaxis$stack,
                               CUP$CodigoSintaxis$top);
    }
}

}
